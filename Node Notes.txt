IF WE USE WSL(Windows Subsystem for Linux) THEN TO GET THE WSL(UBUNTU) FOLDER WE HAVE TO TYPE IN SEARCH BOX => //wsl$
TO INSTALL WSL , OPEN TERMINAL AND TYPE wsl --install.
THIS COMMEAND INSTALL THE VIRTUAL UBUNTU SYSTEM IN THE WINDOWS.

-------------------------------------------------------------------------

PRO TIP => In .html file if you use script tag before body then the body tag details load after the script tag finish, but if you want the script tag work as a async then we have to use defer property in script tag.

what is nodejs => Nodejs is the c++ applcation(CLI) which can understand and run javascript code outside the browser. It provides a run time enviroment built on chorme v8 engine, enabling developers to execute javascript on the server side.

-------------------------------------------------------------------------

=>> BASICS OF TERMINAL =>  

=> For the terminal we are using git bash (Bash is the scripting language) (if we want create the bash file then ,the extension is .sh)
=> echo comman d is used for print something in terminal.
=> pwd => gives the current directory.
=> whoami => give current user.
=> source ~/.bashrc  => to run bashrc file.     

=> cd . => show the current directory.
=> cd .. => go backward to the parent of the current directory.
=> cd ../text.js (suppose current directory parent folder has this file) => go backward and go to the particular folder.
=> cd ~ => Go to the main parent folder (Ubuntu command).
=> cd ~/ => Go to the main parent folder (/ for some specfic folder or file) (Ubuntu command).

=> ls/dir => give all the files in the current directory.
=> ls -a => show the files and hidden files.
=> ls -l => show all the file with there permissions.
=> ls -l index.js=> show all the permission of this file.

=> touch => make the file.
   => touch index.html

=> mkdir => make the folder(DIRECTORY).
   => mkdir src

=> cp => copy the file from one place to another(note => set the path then both the argument get append).
   => cp filename place where to copy
   => cp index.html src

=> mv => move the file from one play to another, and used for rename also (note => set the path then both the argument get append).
   => mv filename place where to copy
   => mv filename newfilename
   => mv index.html src

=> rm -rf => to remove any file, folder, empty folder (we can use rm for only file, rmdir for empty folder, rm -r for remove folder with some data init (-r means recusively)).
   => rm -rf filename

=> cat => to open a file and read the content.
   => cat index.html
=> nano => to edit the file (ctrl + o to save, ctrl + x to exit).
   => nano index.html
=> vim => to edit the file (press i to start editing , esc to stop editing, :w to save , :q to exit , and :wq to save and exit ).
   => vim index.html

=> explorer . => this command helps to open the file explorer of the current path.
=> cygpath -u/-w > this is the utility function used in terminal to get the path in the perticular os format.
   => -w is for window , -u is for ubuntu/unix.  
   => command : cygpath -u path.
 
=> xxd => to see binary content(hex value).
   => xxd index.js

---------------PERMISSIONS----------------

=> chmod => this is for change the permissions of file and folder.
  => command:  chmod +x index.js 
  ** this means give the execute permission to the current user for this file/folder.

  => command:  chmod -x index.js 
  ** this means remove the execute permission to the current user for this file/folder.

** So there are some alphabet for the permission (d,r,w,x,-);
1. d is for directory/folder.
2. r/4 is for read.
3. w/2 is for write.
4. x/1 is for executable file.
5. - is represent that this is file.

=>> example : -rwx--x--x : Now this is the file because of (-) , and this file has (-rwx) read,write,execute permission for the current user, and (--x) means current group has only execute permission , (--x) means third permission other then groups and current user has only execute permission.

** The permission consist of 10 letters , first indicate this is file or folder ,
                                          consist of 3 letters , indicate the current user (u) permissions ,
                                          consist of 3 letters, indicate the current group (g) permission , 
                                          consist of 3 letter, indicate the third party user/others (o) permission.

** We can give th permission with the help of numbers also like : 777 means all three of them has read, write, execute permission.
** Write permission is very important , if have to mention the user type to give the permission to specfic user in command.

// EXAMPLES :  
chmod u+r,g+r, o+r index.js => means give read permission to all.
chmod +r index.js => read permission to all.
chmod +w index.js => this permission only give to current user.
chmod u+w,g+w => permission for write to the specfic user.
chmod 777 index.js => all permission to all (combination of r,w,x make the number)
chmod 652 index.js => read and write permssion to current user, read and execute to group, write to the others.


----------------------------------------------------------------------------------

=>> BASICS OF OS => software to eximine process and thread use (system informer).

=> context switching => Suppose i have a computer of 4 cores , it means my computer can handle 4 application/process, means 1 core can handle 1 application until we close them. but this is the issue that why OS comes into the picture , because in todays world we can see 4 core computer can run 10 20 etc application at a time, this is due to OS. OS send the application to the core in every 1ms and again back to the same place (to and fro motion) this process is called context switching.

=> process => A process is defined as a sequence of instructions executed in a predefined order. In simple words, any program that is executed is termed as a process. Processes change their state as they execute and can be either new, ready, running, waiting or terminated.

=> thread => Thread is the worker of process. Means process create the thread to get the work done fast.
=> If we create the multiple threads and have only one core the phenomena called concurrency. because one thread go and comes then second one go (context switching).
=> If we have multiple thread and multiple core then the phenomena called paraellism.
      => * If we have 9 threads and only have 6 core then we called that 9 core is concurrent and 6 core is in parallism.
      => ** So because of multiple threads then nodejs called multithread language.Threads is faster then the single thread(main thread) .beacuse it takes the extra cpu space and use remaining core in the system.

-------------------------------------------------------------------------------------

=>> INTRODUCTION TO NODEJS =>>

1. module system and commonjs DIFFERENCE :
   1. we have to use extension while import the file, because in commonjs there is no error handling of the extension we can create any file with any extension (like .aslkjgdask) and require them, but this is not working in module system. 
   2. commonjs loads the file synchoronous and module system loads the file asynchnoronus.
   3. file extension is madentory but in commonjs no need.
   4. There are two types of module in nodejs one is commonjs system and another one is module system, the extension we can use if project is using both system then cjs , mjs extension we can use to make a file.
   5. In common js the __dirname, __filename is easily available , but in module system we have to destructure this by import.meta.
   6. The value is this keyword is undefined in module, but in commonjs the value is module.exports.
   7. module system is hoisted , commonjs is not.
   8. export multiple things in module system (export(named export) , export default) , but in commonjs we can export one object (because requried is the function and function return one value only).
   9. Top level await can used , but not in commonjs.
   10. Strict mode is enabled in module system, not in common js.

2. Shebang : For use the shebang if have to add #! in the top of the file and add the process by which we want to exexute the file.
            ex : #!node => before shebang the command for exexute some file is node app.js, now app.js only.

3. Npx : npx is a used to run the cli library like vite etc,
      => there are two types of library package library , cli library, main difference is we can import the package library the file and use them like bcrypt, axios etc, and cli library like vite etc.


=>> NUMBER SYSTEM =>> In the computer world all the code is working on the binary system, because it is easy to understand, but for humans we are using decimal number system.

=>> We use 4 types of system :
1. Binary => 0,1 => starts with 0b => 2^
2. Octal => 0,1,2,3,4,5,6,7 => starts with 0o => 8^
3. Decimal => 0,1,2,3,4,5,6,7,8,9 => This is normal as we write => 10^
4. HexaDecimal => 0,1,2,3,4,5,6,7,8,9,A,B,C,D,F => starts with 0x => 16^

=>> ** The main conversion is binery, octa, HexaDecimal to decimal, because this is widely use.

ex : binary => 1111             
conversion => 1 x 2^0 = 1
              1 x 2^1 = 2
              1 x 2^2 = 4
              1 x 2^3 = 8
                      = 15 
=> Same process goes for all.

=> ** But in the old time we are facing one problem , and the problem is how to save characters, thats why engineer introcuce charactercoding, and character set.
=>> Characters encoding is depends on character set(ASCII(128 character, works on 7 bits => approx 1byte for one charachter), UNICODE) (Please rewatch this section for better understanding).

-----------------------------------------------------------------------

=>> BUFFER => buffer uses ArrayBuffer function of js behind the scene.
Pure JavaScript is great with Unicode-encoded strings, but it does not handle binary data very well. It is not problematic when we perform an operation on data at the browser level but at the time of dealing with TCP stream and performing a read-write operation on the file system is required to deal with pure binary data.

To satisfy this need Node.js uses Buffer to handle the binary data. So in this article, we are going to know about buffer in Node.js.

Buffer in Node =>
The Buffer class in Node.js is used to perform operations on raw binary data. Generally, Buffer refers to the particular memory location in memory. Buffer and array have some similarities, but the difference is array can be any type, and it can be resizable. Buffers only deal with binary data, and it can not be resizable. Each integer in a buffer represents a byte. console.log() function is used to print the Buffer instance.

==> buffer hsa 2 main function alloc(), allocUnsafe() ;
1. alloc(4) => This function help to create the allocate the space in the memory and that memory is clear.
2. allocUnsafe(4) => This is same as alloc but when we want more space like(4000) bytes, then it comes with some data which is somewhere in that allocated space, and this is faster then alloc() , because this function does not check that the requried memory is totally empty or not.

** DRAWBACk => If we use buffers for the large data , then it create problems ;
1 . it filles the space in the memory , because behind the scene it uses ArrayBuffers and ArrayBuffers takes some space from the memory(ram). 
2. it slow down the server or somethings crash the server.

